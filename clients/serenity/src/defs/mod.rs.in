
#[derive(Serialize, Deserialize, Debug)]
pub struct Config  {
    pub bots: i16,
    #[serde(rename="fieldRadius")]
    pub field_radius: i16,
    #[serde(rename="move")]
    pub moves_allowed: i16,
    #[serde(rename="startHp")]
    pub start_hp: i16,
    pub cannon: i16,
    pub radar: i16,
    #[serde(rename="maxCount")]
    pub max_count: i16,
    pub asteroids: i16,
    #[serde(rename="loopTime")]
    pub loop_time: i16,
    #[serde(rename="noWait")]
    pub no_wait: bool,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Bot {
    #[serde(rename="botId")]
    pub bot_id: i16,
    pub name: String,
    #[serde(rename="teamId")]
    pub team_id: i16,
    pub alive: bool,
    pub pos: Option<Pos>,
    pub hp: Option<i16>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Team {
    pub name: String,
    #[serde(rename="teamId")]
    pub team_id: i16,
    pub bots: Vec<Bot>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct JoinMessage {
    #[serde(rename="type")]
    pub event_type: String,
    #[serde(rename="teamName")]
    pub team_name: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct ActionsMessage {
    #[serde(rename="type")]
    pub event_type: String,
    #[serde(rename="roundId")]
    pub round_id: i16,
    pub actions: Vec<Action>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Action  {
    #[serde(rename="botId")]
    pub bot_id: i16,
    #[serde(rename="type")]
    pub action_type: String,
    pub pos: Pos,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct IncomingConnected  {
    #[serde(rename="type")]
    pub event_type: String,
    #[serde(rename="teamId")]
    pub team_id: i16,
    pub config: Config,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Start  {
    pub config: Config,
    pub you: Team,
    #[serde(rename="otherTeams")]
    pub other_teams: Vec<Team>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct IncomingMessage {
    #[serde(rename="type")]
    pub event_type: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct IncomingEvents {
    #[serde(rename="type")]
    pub event_type: String,
    #[serde(rename="roundId")]
    pub round_id: i16,
    pub config: Config,
    pub you: Team,
    #[serde(rename="otherTeams")]
    pub other_teams: Vec<Team>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct SomeEvent {
    pub event: String,
}

// `hit` Bot has been hit. This might mean that you have been hit, or you hit another bot.
#[derive(Serialize, Deserialize, Debug)]
pub struct HitEvent {
    #[serde(rename="botId")]
    pub bot_id: i16,
    pub source: i16,
}

// * `die` Bot has died. This might mean that you died, or that you killed another bot.
#[derive(Serialize, Deserialize, Debug)]
pub struct DieEvent {
    #[serde(rename="botId")]
    pub bot_id: i16,
}

// * `see` Results seeing bots. You will never be included in this event.
#[derive(Serialize, Deserialize, Debug)]
pub struct SeeEvent {
    pub source: i16,
    #[serde(rename="botId")]
    pub bot_id: i16,
    pub pos: Pos,
}

// * `radarEcho` Results of radaring bots. You will never be included in this event.
#[derive(Serialize, Deserialize, Debug)]
pub struct EchoEvent {
    pub pos: Pos,
}

// * `detected` You will be notified that you have been seen or radared.
#[derive(Serialize, Deserialize, Debug)]
pub struct DetectedEvent {
    #[serde(rename="botId")]
    pub bot_id: i16, 
}

// * `damaged` Your bot was damaged
#[derive(Serialize, Deserialize, Debug)]
pub struct DamagedEvent {
    #[serde(rename="botId")]
    pub bot_id: i16,
    pub damage: i16, 
}

// * `move` One of your team's bots new position after a move action. Cannot move out of the map.
#[derive(Serialize, Deserialize, Debug)]
pub struct MoveEvent {
    #[serde(rename="botId")]
    pub bot_id: i16,
    pub pos: Pos,
}

// * `noaction` Bot performed no actions.
#[derive(Serialize, Deserialize, Debug)]
pub struct NoactionEvent {
    #[serde(rename="botId")]
    pub bot_id: i16, 
}

