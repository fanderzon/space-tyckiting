extern crate websocket;

use std::str::from_utf8;
use websocket::client::request::Url;
use websocket::{Client, Message, Sender, Receiver};
use websocket::message::Type;

fn main() {
    let addr = "ws://localhost:3000".to_string();
    let agent = "rust-websocket";
    let game_host = "localhost";
    let game_port = "3000";

    println!("Using fuzzingserver {}", addr);
    println!("Using agent {}", agent);

    let mut game_on = true;

    while game_on {

    let url = Url::parse(format!("ws://{}:{}", game_host, game_port).as_ref()).unwrap();
    let request = Client::connect(url).unwrap();
    let response = request.send().unwrap();
    match response.validate() {
        Ok(()) => (),
        Err(e) => {
            println!("{:?}", e);
        }
    }
    let (mut sender, mut receiver) = response.begin().split();

        for message in receiver.incoming_messages() {
            let message: Message = match message {
                Ok(message) => message,
                Err(e) => {
                    println!("Error: {:?}", e);
                    let _ = sender.send_message(&Message::close());
                    game_on = false;
                    break;
                }
            };

            handle_message(&mut sender, message);
        }
    }
}

fn handle_message<S: Sender>(sender: &mut S, message: Message) -> bool {
    println!("Message {:?}", message);

    match message.opcode {
        Type::Text => {
            let pl = from_utf8(&message.payload).unwrap();
            let response = Message::text(from_utf8(&*message.payload).unwrap());
            let connected_json: Connected = serde_json::from_str(&pl).unwrap();
            if connected_json.event_type == "connected" {
                println!("Got connected message, sending join");
                let join_msg = Join { event_type: "join".to_string(), team_name: "Serenity".to_string() };
                let join_string = serde_json::to_string(&join_msg).unwrap();
                let join_message = Message::text( join_string.to_string() );
                sender.send_message(&join_message).unwrap();
            }
            println!("Connected {:?}", connected_json);
            println!("Payload : {:?}", pl);
            sender.send_message(&response).unwrap();
        }
        Type::Binary => {
            sender.send_message(&Message::binary(message.payload)).unwrap();
        }
        Type::Close => {
            let _ = sender.send_message(&Message::close());
            return false;
        }
        Type::Ping => {
            sender.send_message(&Message::pong(message.payload)).unwrap();
        }
        _ => (),
    }
    return true;
}

#[derive(Serialize, Deserialize, Debug)]
struct Connected  {
    #[serde(rename="type")]
    event_type: String,
    #[serde(rename="teamId")]
    team_id: i8,
    config: Config,
}

#[derive(Serialize, Deserialize, Debug)]
struct Config  {
    bots: i8,
    #[serde(rename="fieldRadius")]
    field_radius: i8,
    #[serde(rename="move")]
    moves_allowed: i8,
    #[serde(rename="startHp")]
    start_hp: i8,
    cannon: i8,
    radar: i8,
    #[serde(rename="maxCount")]
    max_count: i16,
    asteroids: i8,
    #[serde(rename="loopTime")]
    loop_time: i16,
    #[serde(rename="noWait")]
    no_wait: bool
}

#[derive(Serialize, Deserialize, Debug)]
struct Join  {
    #[serde(rename="type")]
    event_type: String,
    #[serde(rename="teamName")]
    team_name: String,
}
